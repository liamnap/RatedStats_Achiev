name: Dispatch PvP Sync Batches
on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

permissions:
  actions: write   # needed to call createWorkflowDispatch
  contents: read

concurrency:
  group: pvp-sync-dispatcher-${{ github.ref }}
  cancel-in-progress: false

env:
  BATCH_SIZE: 2500
  REGIONS: us eu kr tw

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      BLIZZARD_CLIENT_ID:        ${{ secrets.BLIZZARD_CLIENT_ID }}
      BLIZZARD_CLIENT_SECRET:    ${{ secrets.BLIZZARD_CLIENT_SECRET }}
      BLIZZARD_CLIENT_ID_EU:     ${{ secrets.BLIZZARD_CLIENT_ID_EU }}
      BLIZZARD_CLIENT_SECRET_EU: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU }}
      BLIZZARD_CLIENT_ID_US:     ${{ secrets.BLIZZARD_CLIENT_ID_US }}
      BLIZZARD_CLIENT_SECRET_US: ${{ secrets.BLIZZARD_CLIENT_SECRET_US }}
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.13' }
      - name: Install deps
        run: pip install aiohttp requests psutil
      - name: Build batch matrix
        id: matrix
        shell: bash
        run: |
          ITEMS=()
          for region in $REGIONS; do
            TOTAL=$(python sync_pvp.py --list-ids-only --region "$region" | wc -l)
            COUNT=$(( (TOTAL + BATCH_SIZE - 1) / BATCH_SIZE ))
            for ((i=0;i<COUNT;i++)); do
              OFFSET=$(( i * BATCH_SIZE ))
              ITEMS+=("{\"region\":\"$region\",\"offset\":$OFFSET,\"batch_id\":$i,\"total_batches\":$COUNT}")
            done
          done
          # comma‑join
          m=$(printf ',%s' "${ITEMS[@]}")
          echo "matrix=[${m:1}]" >> $GITHUB_OUTPUT

  dispatch:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Fire off each batch via REST
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const matrix = JSON.parse(process.env.MATRIX);
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const groupId = process.env.GROUP_ID;
            const groupBase = process.env.GROUP_ID;
            for (const job of matrix) {
              await github.rest.actions.createWorkflowDispatch({
                owner,
                repo,
                workflow_id: 'pvp-sync-batch.yml',
                ref: 'dev',
                inputs: {
                  region: job.region,
                  offset: String(job.offset),
                  limit: String(process.env.BATCH_SIZE),
                  batch_id:      String(job.batch_id),
                  total_batches: String(job.total_batches),
                  'group-id':    String(groupId)
                }
              });
              console.log(`▶️ Dispatched ${job.region}@${job.offset}`);
            }
        env:
          MATRIX: ${{ needs.prepare.outputs.matrix }}
          GROUP_ID:   ${{ github.run_id }}
          BATCH_SIZE: ${{ env.BATCH_SIZE }}
