name: Finalize PvP Sync

on:
  workflow_run:
    workflows: ["PvP Sync Batch"]   # must exactly match the name: of your batch workflow
    types: [completed]
    branches: [dev]                 # ensure we only react to batch runs on 'dev' branch

permissions:
  contents: write   # needed for git push
  actions: read

concurrency:
  group: finalize-${{ github.event.workflow_run.id }}
  cancel-in-progress: false

jobs:
  decide:
    name: Guard (only finalize on last batch)
    runs-on: ubuntu-latest
    outputs:
      is_final: ${{ steps.guard.outputs.is_final }}
      region:   ${{ steps.guard.outputs.region }}
    steps:
      - name: Parse triggering run title
        id: guard
        shell: bash
        run: |
          set -euo pipefail
          # Use payload directly; no extra gh call needed
          TITLE="${{ github.event.workflow_run.display_title }}"
          echo "Title: $TITLE"
          # Expect: "PvP Sync Batch X / Y for xx"
          if [[ "$TITLE" =~ ^PvP[[:space:]]Sync[[:space:]]Batch[[:space:]]([0-9]+)[[:space:]]*/[[:space:]]*([0-9]+)[[:space:]]for[[:space:]]([a-z]{2})$ ]]; then
            CUR="${BASH_REMATCH[1]}"; TOT="${BASH_REMATCH[2]}"; REGION="${BASH_REMATCH[3]}"
            echo "region=$REGION" >>"$GITHUB_OUTPUT"
            if [[ "$CUR" == "$TOT" ]]; then
              echo "is_final=true" >>"$GITHUB_OUTPUT"
              echo "Detected last batch: $CUR / $TOT"
            else
              echo "is_final=false" >>"$GITHUB_OUTPUT"
              echo "Not last batch ($CUR / $TOT) – skipping finalize."
            fi
          else
            echo "Could not parse batch counters/region from title; skipping finalize."
            echo "is_final=false" >>"$GITHUB_OUTPUT"
          fi

  finalize:
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.decide.outputs.is_final == 'true' }}
    needs: [decide]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Wait until all batch runs for this region+commit are finished
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          wf="PvP Sync Batch"
          region='${{ needs.decide.outputs.region }}'
          sha='${{ github.event.workflow_run.head_sha }}'
          branch='${{ github.event.workflow_run.head_branch }}'
          echo "Polling for unfinished batch runs for region=${region}, sha=${sha} on branch ${branch}..."
          while true; do
            # Count runs for this workflow+branch+region+commit that are not yet 'completed'
            remaining=$(gh run list -w "$wf" -b "$branch" -L 500 --json status,displayTitle,headSha \
              --jq "[ .[]                                                                                 \
                     | select(.displayTitle | endswith(\" for ${region}\"))                               \
                     | select(.headSha == \"${sha}\")                                                     \
                     | select(.status != \"completed\") ]                                                 \
                    | length" )
            echo "Remaining in-progress/queued: $remaining"
            [ "$remaining" -eq 0 ] && break
            sleep 10
          done

      - name: Download DB shards for this region+commit
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          wf="PvP Sync Batch"
          branch='${{ github.event.workflow_run.head_branch }}'
          region='${{ needs.decide.outputs.region }}'
          sha='${{ github.event.workflow_run.head_sha }}'
          runs=$(gh run list -w "$wf" -b "$branch" -L 500 --json databaseId,displayTitle,headSha \
                 --jq "[ .[]                                                                       \
                        | select(.displayTitle | endswith(\" for ${region}\"))                     \
                        | select(.headSha == \"${sha}\") ]")
          mkdir -p partial_outputs
          for id in $(echo "$runs" | jq -r '.[].databaseId'); do
            # download only DB artifacts; extract under per‑artifact dirs
            gh run download "$id" --pattern "pvp-db-*" -D partial_outputs || true
          done
          # flatten shards so sync_pvp.py can glob partial_outputs/achdb_*.sqlite
          find partial_outputs -type f -name "achdb_*.sqlite" -exec mv -t partial_outputs {} +

      - name: Verify all region+commit runs succeeded and set REGION
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          wf="PvP Sync Batch"
          branch='${{ github.event.workflow_run.head_branch }}'
          region='${{ needs.decide.outputs.region }}'
          sha='${{ github.event.workflow_run.head_sha }}'
          runs=$(gh run list -w "$wf" -b "$branch" -L 500 --json databaseId,displayTitle,status,conclusion,headSha \
                 --jq "[ .[]                                                                                 \
                        | select(.displayTitle | endswith(\" for ${region}\"))                               \
                        | select(.headSha == \"${sha}\") ]")
          total=$(echo "$runs" | jq 'length')
          ok=$(echo "$runs" | jq '[ .[] | select(.conclusion == "success") ] | length')
          if [ "$ok" -ne "$total" ]; then
            echo "ERROR: Some batch runs in group ${group} failed:"
            echo "$runs" | jq -r '.[] | "\(.databaseId)\t\(.status)\t\(.conclusion)\t\(.displayTitle)"'
            exit 1
          fi
          # REGION is already parsed by the guard job
          echo "Finalizing region: $region"
          echo "REGION=${region}" >> $GITHUB_ENV

      - name: Merge batches & write final .lua
        env:
          BLIZZARD_CLIENT_ID:     ${{ secrets.BLIZZARD_CLIENT_ID }}
          BLIZZARD_CLIENT_SECRET: ${{ secrets.BLIZZARD_CLIENT_SECRET }}
          BLIZZARD_CLIENT_ID_EU:     ${{ secrets.BLIZZARD_CLIENT_ID_EU }}
          BLIZZARD_CLIENT_SECRET_EU: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU }}
          BLIZZARD_CLIENT_ID_US:     ${{ secrets.BLIZZARD_CLIENT_ID_US }}
          BLIZZARD_CLIENT_SECRET_US: ${{ secrets.BLIZZARD_CLIENT_SECRET_US }}
        run: |
          set -euo pipefail
          echo "Finalizing region ${REGION}"
          python sync_pvp.py --region "${REGION}" --mode finalize

      - name: Commit & push finalized .lua
        run: |
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add region_*.lua
          git commit -m "Finalize PvP sync" || echo "No changes to commit"
          git push origin dev
