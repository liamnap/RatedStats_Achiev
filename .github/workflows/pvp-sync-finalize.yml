name: Finalize PvP Sync

# Trigger whenever the "PvP Sync Batch" workflow finishes on dev
on:
  workflow_run:
    workflows: ["PvP Sync Batch"]
    types: [completed]
    branches: [dev]

permissions:
  contents: write
  actions: read

concurrency:
  group: finalize-${{ github.event.workflow_run.id }}
  cancel-in-progress: false

jobs:
  guard:
    # only fire for our batch workflow, and only for tw/kr runs
    if: ${{ github.event.workflow_run.name == 'PvP Sync Batch' &&
            (endsWith(github.event.workflow_run.display_title, ' for kr') ||
             endsWith(github.event.workflow_run.display_title, ' for tw')) }}
    name: Check if this was the last batch
    runs-on: ubuntu-latest
    outputs:
      is_final: ${{ steps.parse.outputs.is_final }}
      region:   ${{ steps.parse.outputs.region }}
    steps:
      - name: Parse batch number & region from run title
        id: parse
        shell: bash
        run: |
          set -euo pipefail
          TITLE="${{ github.event.workflow_run.display_title }}"
          echo "Run title: $TITLE"
          # Expect titles like: "PvP Sync Batch 3 / 10 for kr"
          if [[ "$TITLE" =~ ^PvP[[:space:]]Sync[[:space:]]Batch[[:space:]]([0-9]+)[[:space:]]*/[[:space:]]*([0-9]+)[[:space:]]for[[:space:]]([a-z]{2})$ ]]; then
            CUR="${BASH_REMATCH[1]}"
            TOT="${BASH_REMATCH[2]}"
            REGION="${BASH_REMATCH[3]}"
            echo "region=$REGION" >>"$GITHUB_OUTPUT"
            if [[ "$CUR" == "$TOT" ]]; then
              echo "is_final=true" >>"$GITHUB_OUTPUT"
              echo "✅ Detected final batch ($CUR/$TOT) for $REGION"
            else
              echo "is_final=false" >>"$GITHUB_OUTPUT"
              echo "⏭ Not final batch ($CUR/$TOT) for $REGION → skipping finalize."
            fi
          else
            echo "is_final=false" >>"$GITHUB_OUTPUT"
            echo "⚠️ Couldn't parse batch info; aborting finalize."
          fi

  finalize:
    if: >
      github.event.workflow_run.conclusion == 'success' &&
      needs.guard.outputs.is_final == 'true'
    needs: guard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Wait for ALL region batch runs to complete
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          wf="PvP Sync Batch"
          region="${{ needs.guard.outputs.region }}"
          sha="${{ github.event.workflow_run.head_sha }}"
          branch="${{ github.event.workflow_run.head_branch }}"
          echo "Waiting for all '$wf' runs for region=$region, sha=$sha..."
          while true; do
            # find any runs still pending/running for this sha+region
            rem=$(gh run list \
                  -w "$wf" -b "$branch" -L 500 \
                  --json status,displayTitle,headSha \
                  --jq "[ .[]
                          | select(.headSha==\"$sha\")
                          | select(.displayTitle|endswith(\" for $region\"))
                          | select(.status!=\"completed\") ] | length")
            if (( rem == 0 )); then
              echo "✅ All $wf runs for $region/$sha are done."
              break
            fi
            echo "⏳ $rem runs still in progress…"
            sleep 10
          done

      - name: Download every batch’s DB shard
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          wf="PvP Sync Batch"
          region="${{ needs.guard.outputs.region }}"
          sha="${{ github.event.workflow_run.head_sha }}"
          branch="${{ github.event.workflow_run.head_branch }}"
          mkdir -p partial_outputs
          # grab the list of run IDs for this sha+region
          ids=$(gh run list \
                  -w "$wf" -b "$branch" -L 500 \
                  --json databaseId,displayTitle,headSha \
                  --jq "[ .[]
                            | select(.headSha==\"$sha\")
                            | select(.displayTitle|endswith(\" for $region\"))
                            | .databaseId ] | unique | .[]")
          for id in $ids; do
            echo "Downloading DB shard from run $id…"
            gh run download "$id" \
               --pattern "achiev_${region}.db" \
               -D partial_outputs || true
          done

      - name: Finalize region file
        env:
          REGION: ${{ needs.guard.outputs.region }}
          BLIZZARD_CLIENT_ID:     ${{ secrets.BLIZZARD_CLIENT_ID }}
          BLIZZARD_CLIENT_SECRET: ${{ secrets.BLIZZARD_CLIENT_SECRET }}
          BLIZZARD_CLIENT_ID_EU:     ${{ secrets.BLIZZARD_CLIENT_ID_EU }}
          BLIZZARD_CLIENT_SECRET_EU: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU }}
          BLIZZARD_CLIENT_ID_US:     ${{ secrets.BLIZZARD_CLIENT_ID_US }}
          BLIZZARD_CLIENT_SECRET_US: ${{ secrets.BLIZZARD_CLIENT_SECRET_US }}
        run: |
          set -euo pipefail
          echo "Merging batches and writing final region_${REGION}.lua…"
          python sync_pvp.py --mode finalize --region "$REGION"

      - name: Commit & push finalized .lua
        run: |
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add region_${{ needs.guard.outputs.region }}.lua
          git commit -m "Finalize PvP sync for ${{ needs.guard.outputs.region }}" \
            || echo "No changes to commit"
          git push origin dev
