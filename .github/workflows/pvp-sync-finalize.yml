name: Finalize PvP Sync

on:
  workflow_run:
    workflows: ["PvP Sync Batch"]   # must exactly match the name: of your batch workflow
    types: [completed]
    branches: [dev]                 # ensure we only react to batch runs on 'dev' branch

permissions:
  contents: write   # needed for git push
  actions: read

concurrency:
  group: finalize-${{ github.ref }}
  cancel-in-progress: true

jobs:
  finalize:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Wait until all batch runs in this group are finished
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          wf="PvP Sync Batch"
          # Extract group id from the triggering run's display title, e.g. "... (group 16624659864-us)"
          group=$(gh run view ${{ github.event.workflow_run.id }} --json displayTitle --jq '.displayTitle' | sed -n 's/.*(group \([^)]\+\)).*/\1/p')
          branch='${{ github.event.workflow_run.head_branch }}'
          if [ -z "$group" ]; then
            echo "ERROR: group id not found in run-name. Ensure batch run-name ends with '(group <id>)'."
            exit 1
          fi
          echo "Polling for unfinished batch runs for group ${group} on branch ${branch}..."
          while true; do
            # Count runs for this workflow that are not yet 'completed'
            remaining=$(gh run list -w "$wf" -b "$branch" -L 500 --json status,displayTitle \
              --jq "[ .[]                                                     \
                     | select(.displayTitle | contains(\"group ${group}\"))   \
                     | select(.status != \"completed\") ]                     \
                    | length")
            echo "Remaining in-progress/queued: $remaining"
            [ "$remaining" -eq 0 ] && break
            sleep 10
          done

      - name: Download DB shards for this group
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          wf="PvP Sync Batch"
          branch='${{ github.event.workflow_run.head_branch }}'
          group=$(gh run view ${{ github.event.workflow_run.id }} --json displayTitle --jq '.displayTitle' | sed -n 's/.*(group \([^)]\+\)).*/\1/p')
          runs=$(gh run list -w "$wf" -b "$branch" -L 500 --json databaseId,displayTitle \
                 --jq "[ .[] | select(.displayTitle | contains(\"group ${group}\")) ]")
          mkdir -p partial_outputs
          for id in $(echo "$runs" | jq -r '.[].databaseId'); do
            # download only DB artifacts; extract under perâ€‘artifact dirs
            gh run download "$id" --pattern "pvp-db-*" -D partial_outputs || true
          done
          # flatten shards so sync_pvp.py can glob partial_outputs/achdb_*.sqlite
          find partial_outputs -type f -name "achdb_*.sqlite" -exec mv -t partial_outputs {} +

      - name: Verify all group runs succeeded and set REGION
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          wf="PvP Sync Batch"
          branch='${{ github.event.workflow_run.head_branch }}'
          group=$(gh run view ${{ github.event.workflow_run.id }} --json displayTitle --jq '.displayTitle' | sed -n 's/.*(group \([0-9]\+\)).*/\1/p')
          runs=$(gh run list -w "$wf" -b "$branch" -L 500 --json databaseId,displayTitle,status,conclusion \
                 --jq "[ .[] | select(.displayTitle | contains(\"group ${group}\")) ]")
          total=$(echo "$runs" | jq 'length')
          ok=$(echo "$runs" | jq '[ .[] | select(.conclusion == "success") ] | length')
          if [ "$ok" -ne "$total" ]; then
            echo "ERROR: Some batch runs in group ${group} failed:"
            echo "$runs" | jq -r '.[] | "\(.databaseId)\t\(.status)\t\(.conclusion)\t\(.displayTitle)"'
            exit 1
          fi
          # Our group id is "<dispatcher_run_id>-<region>", so grab the <region> suffix:
          region="${group##*-}"
          echo "Finalizing region: $region"
          echo "REGIONS=$region" >> $GITHUB_ENV

      - name: Merge batches & write final .lua
        env:
          BLIZZARD_CLIENT_ID:     ${{ secrets.BLIZZARD_CLIENT_ID }}
          BLIZZARD_CLIENT_SECRET: ${{ secrets.BLIZZARD_CLIENT_SECRET }}
          BLIZZARD_CLIENT_ID_EU:     ${{ secrets.BLIZZARD_CLIENT_ID_EU }}
          BLIZZARD_CLIENT_SECRET_EU: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU }}
          BLIZZARD_CLIENT_ID_US:     ${{ secrets.BLIZZARD_CLIENT_ID_US }}
          BLIZZARD_CLIENT_SECRET_US: ${{ secrets.BLIZZARD_CLIENT_SECRET_US }}
        run: |
          set -euo pipefail
          if [ -z "${REGIONS:-}" ]; then
            echo "No regions detected for this group; defaulting to all: us eu kr tw"
            REGIONS="us eu kr tw"
          fi
          for r in $REGIONS; do
            echo "Finalizing region $r"
            python sync_pvp.py --region "$r" --mode finalize
          done

      - name: Commit & push finalized .lua
        run: |
          git config user.name  "GitHub Action"
          git config user.email "action@github.com"
          git add region_*.lua
          git commit -m "Finalize PvP sync" || echo "No changes to commit"
          git push origin dev
