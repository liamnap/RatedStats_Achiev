name: PvP Sync Batch
run-name: PvP Sync Batch ${{ inputs.batch_num }} / ${{ inputs.total_batches }} for ${{ inputs.region }}

permissions:
  actions: write
  contents: read

on:
  workflow_call:
    inputs:
      batch_id:
        required: true
        type: string
      batch_num:
        required: true
        type: string
      total_batches:
        required: true
        type: string
      region:
        required: true
        type: string
      offset:
        required: true
        type: string
      limit:
        required: true
        type: string
      cred_suffix:
        required: false
        type: string
      group-id:
        required: false
        type: string
      cred_spacing:
        description: "Number of parallel credential streams"
        required: true
        type: string
        
  workflow_dispatch:                       # so we can `createWorkflowDispatch` via API
    inputs:
      region:
        description: 'us, eu, kr, tw'
        required: true
        type: string
      offset:
        description: 'list offset'
        required: true
        type: string
      limit:
        description: 'batch size'
        required: true
        type: string
      batch_id:
        description: '0-based batch index'
        required: true
        type: string
      batch_num:
        required: true
        type: string
      total_batches:
        description: 'Total number of batches'
        required: true
        type: string
      cred_suffix:
        required: false
        type: string
      group-id:
        description: 'Dispatcher run id used to correlate this batch'
        required: true
        type: string
      cred_spacing:
        description: "Number of parallel credential streams"
        required: true
        type: string
        
jobs:
  batch:
    runs-on: ubuntu-latest
    concurrency:
      group: pvp-batch-${{ inputs.region }}-${{ inputs.cred_suffix }}-${{ inputs['group-id'] }}    # one active batch per region
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.13' }
      - name: Enable Git LFS
        run: |
          git lfs install --local
          git lfs env
      - name: Ensure usable region Lua files are present (dev/main aware, no LFS)
        id: seed_luas
        shell: bash
        run: |
          set -euo pipefail

          REF="${{ github.ref_name }}"
          FALLBACK_REF="$REF"
          if [[ "$FALLBACK_REF" != "main" && "$FALLBACK_REF" != "dev" ]]; then
            FALLBACK_REF="main"
          fi
          echo "Current ref: $REF ; fallback ref: $FALLBACK_REF"

          is_real () { [[ -s "$1" ]] && ! head -n2 "$1" | grep -qi 'git-lfs.github.com/spec'; }

          have_real=0
          for f in ./region_*.lua; do
            [[ -e "$f" ]] || continue
            if is_real "$f"; then have_real=$((have_real+1)); fi
          done
          if (( have_real > 0 )); then
            echo "Found $have_real usable region Lua file(s) in workspace."
            exit 0
          fi

          echo "::warning::No usable region Lua files in workspace. Pulling from $FALLBACK_REF…"
          git fetch --no-tags --depth=1 origin "$FALLBACK_REF"
          mapfile -t CANDIDATES < <(git ls-tree --name-only "origin/$FALLBACK_REF" |
                                    grep -E '^region_(us|eu|tw|kr)((_part[0-9]+)|(-[0-9]+))?\.lua$')
          if (( ${#CANDIDATES[@]} > 0 )); then
            git checkout "origin/$FALLBACK_REF" -- "${CANDIDATES[@]}" || true
          fi

          have_real=0
          for f in ./region_*.lua; do
            [[ -e "$f" ]] || continue
            if is_real "$f"; then have_real=$((have_real+1)); fi
          done
          if (( have_real == 0 )); then
            echo "::warning::Still no usable region Lua files after fallback fetch; batches will use bracket-only keys."
          else
            echo "✅ Seeded $have_real region Lua file(s) from $FALLBACK_REF."
          fi
      - name: Install deps
        run: |
          pip install aiohttp requests psutil
      - name: Run PvP Sync batch
        env:
          REGION: ${{ inputs.region }}
          BATCH_SIZE: ${{ inputs.limit }}
          CRED_SUFFIX: ${{ inputs.cred_suffix }}
          
          BLIZZARD_CLIENT_ID_EU_1:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_1 }}
          BLIZZARD_CLIENT_SECRET_EU_1: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_1 }}
          BLIZZARD_CLIENT_ID_US_1:     ${{ secrets.BLIZZARD_CLIENT_ID_US_1 }}
          BLIZZARD_CLIENT_SECRET_US_1: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_1 }}
          BLIZZARD_CLIENT_ID_TW_1:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_1 }}
          BLIZZARD_CLIENT_SECRET_TW_1: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_1 }}
          BLIZZARD_CLIENT_ID_KR_1:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_1 }}
          BLIZZARD_CLIENT_SECRET_KR_1: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_1 }}
          
          BLIZZARD_CLIENT_ID_EU_2:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_2 }}
          BLIZZARD_CLIENT_SECRET_EU_2: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_2 }}
          BLIZZARD_CLIENT_ID_US_2:     ${{ secrets.BLIZZARD_CLIENT_ID_US_2 }}
          BLIZZARD_CLIENT_SECRET_US_2: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_2 }}
          BLIZZARD_CLIENT_ID_TW_2:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_2 }}
          BLIZZARD_CLIENT_SECRET_TW_2: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_2 }}
          BLIZZARD_CLIENT_ID_KR_2:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_2 }}
          BLIZZARD_CLIENT_SECRET_KR_2: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_2 }}
          
          BLIZZARD_CLIENT_ID_EU_3:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_3 }}
          BLIZZARD_CLIENT_SECRET_EU_3: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_3 }}
          BLIZZARD_CLIENT_ID_US_3:     ${{ secrets.BLIZZARD_CLIENT_ID_US_3 }}
          BLIZZARD_CLIENT_SECRET_US_3: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_3 }}
          BLIZZARD_CLIENT_ID_TW_3:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_3 }}
          BLIZZARD_CLIENT_SECRET_TW_3: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_3 }}
          BLIZZARD_CLIENT_ID_KR_3:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_3 }}
          BLIZZARD_CLIENT_SECRET_KR_3: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_3 }}
          
          BLIZZARD_CLIENT_ID_EU_4:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_4 }}
          BLIZZARD_CLIENT_SECRET_EU_4: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_4 }}
          BLIZZARD_CLIENT_ID_US_4:     ${{ secrets.BLIZZARD_CLIENT_ID_US_4 }}
          BLIZZARD_CLIENT_SECRET_US_4: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_4 }}
          BLIZZARD_CLIENT_ID_TW_4:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_4 }}
          BLIZZARD_CLIENT_SECRET_TW_4: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_4 }}
          BLIZZARD_CLIENT_ID_KR_4:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_4 }}
          BLIZZARD_CLIENT_SECRET_KR_4: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_4 }}
          
          BLIZZARD_CLIENT_ID_EU_5:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_5 }}
          BLIZZARD_CLIENT_SECRET_EU_5: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_5 }}
          BLIZZARD_CLIENT_ID_US_5:     ${{ secrets.BLIZZARD_CLIENT_ID_US_5 }}
          BLIZZARD_CLIENT_SECRET_US_5: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_5 }}
          BLIZZARD_CLIENT_ID_TW_5:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_5 }}
          BLIZZARD_CLIENT_SECRET_TW_5: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_5 }}
          BLIZZARD_CLIENT_ID_KR_5:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_5 }}
          BLIZZARD_CLIENT_SECRET_KR_5: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_5 }}
          
          BLIZZARD_CLIENT_ID_EU_429:     ${{ secrets.BLIZZARD_CLIENT_ID_EU_429 }}
          BLIZZARD_CLIENT_SECRET_EU_429: ${{ secrets.BLIZZARD_CLIENT_SECRET_EU_429 }}
          BLIZZARD_CLIENT_ID_US_429:     ${{ secrets.BLIZZARD_CLIENT_ID_US_429 }}
          BLIZZARD_CLIENT_SECRET_US_429: ${{ secrets.BLIZZARD_CLIENT_SECRET_US_429 }}
          BLIZZARD_CLIENT_ID_TW_429:     ${{ secrets.BLIZZARD_CLIENT_ID_TW_429 }}
          BLIZZARD_CLIENT_SECRET_TW_429: ${{ secrets.BLIZZARD_CLIENT_SECRET_TW_429 }}
          BLIZZARD_CLIENT_ID_KR_429:     ${{ secrets.BLIZZARD_CLIENT_ID_KR_429 }}
          BLIZZARD_CLIENT_SECRET_KR_429: ${{ secrets.BLIZZARD_CLIENT_SECRET_KR_429 }}
        run: |
          python sync_pvp.py \
            --mode batch \
            --region "${{ inputs.region }}" \
            --cred_suffix "$CRED_SUFFIX" \
            --batch-id ${{ inputs.batch_id }} \
            --total-batches ${{ inputs.total_batches }} \
            --offset ${{ inputs.offset }} \
            --limit ${{ inputs.limit }}

      - name: Compute display id (1-based)
        id: math
        run: echo "display_id=$(( ${{ inputs.batch_id }} + 1 ))" >> "$GITHUB_OUTPUT"

      - name: Upload partial Lua
        uses: actions/upload-artifact@v4
        with:
          name: pvp-partial-${{ inputs.region }}-batch-${{ inputs.batch_id }}-group-${{ inputs['group-id'] }}
          path: partial_outputs/${{ inputs.region }}_batch_${{ inputs.batch_id }}.lua
          if-no-files-found: error
          retention-days: 7

      - name: Upload DB shard
        uses: actions/upload-artifact@v4
        with:
          name: pvp-db-${{ inputs.region }}-batch-${{ inputs.batch_id }}-group-${{ inputs['group-id'] }}
          path: partial_outputs/achdb_${{ inputs.region }}_b${{ inputs.batch_id }}.sqlite
          if-no-files-found: error
          retention-days: 7

      - name: Dispatch next batch in this region (if any)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
            const region   = process.env.REGION;
            const limit    = Number(process.env.LIMIT);
            const curId    = Number(process.env.CUR_ID);
            const total    = Number(process.env.TOTAL);
            const spacing  = Number(process.env.CRED_SPACING);

            if (!Number.isInteger(spacing) || spacing <= 0) {
              core.setFailed(`cred_spacing must be a positive integer (got: '${process.env.CRED_SPACING}')`);
              return;
            }

            const nextId = curId + spacing;
            if (nextId >= total) {
              core.info(`curId ${curId} + spacing ${spacing} = ${nextId} ≥ total ${total}; no batches to queue`);
              return;
            }

            const offset = nextId * limit;

            await github.rest.actions.createWorkflowDispatch({
              owner,
              repo,
              workflow_id: 'pvp-sync-batch.yml',
              ref: context.ref,
              inputs: {
                region:        region,
                offset:        String(offset),
                limit:         String(limit),
                batch_id:      String(nextId),
                batch_num:     String(nextId + 1),
                total_batches: String(total),
                cred_suffix:   process.env.CRED_SUFFIX,
                "group-id":    process.env.GROUP_KEY,
                cred_spacing:  String(spacing)
              }
            });

            core.info(`➡️ Queued region=${region} batch_id=${nextId}, batch_num=${nextId + spacing}/${total}`);
        env:   # ✅ Correct location
          REGION:        ${{ inputs.region }}
          LIMIT:         ${{ inputs.limit }}
          CUR_ID:        ${{ inputs.batch_id }}
          TOTAL:         ${{ inputs.total_batches }}
          GROUP_KEY:     ${{ inputs['group-id'] }}
          CRED_SUFFIX:   ${{ inputs.cred_suffix }}
          CRED_SPACING:  ${{ inputs.cred_spacing }}

      - name: Trigger Finalize PvP Sync (only on last batch)
        if: ${{ inputs.batch_num == inputs.total_batches }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh workflow run "Finalize PvP Sync" \
            --ref "${{ github.ref_name }}" \
            -f region="${{ inputs.region }}" \
            -f sha="${{ github.sha }}" \
            -f branch="${{ github.ref_name }}"
